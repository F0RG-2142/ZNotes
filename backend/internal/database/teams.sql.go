// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: teams.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addToTeam = `-- name: AddToTeam :exec
INSERT INTO user_teams (user_id, team_id, role, joined_at)
VALUES (
    $1,
    $2,
    $3,
    NOW()
)
`

type AddToTeamParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
	Role   string
}

func (q *Queries) AddToTeam(ctx context.Context, arg AddToTeamParams) error {
	_, err := q.db.ExecContext(ctx, addToTeam, arg.UserID, arg.TeamID, arg.Role)
	return err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM Teams t
USING User_Teams ut
WHERE t.id = ut.team_id
AND ut.user_id = $1
AND ut.role = 'admin'
AND t.id = $2
`

type DeleteTeamParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) DeleteTeam(ctx context.Context, arg DeleteTeamParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, arg.UserID, arg.ID)
	return err
}

const getAllTeams = `-- name: GetAllTeams :many
SELECT t.id, t.created_at, t.updated_at, t.team_name, t.created_by, t.is_private
FROM Teams t
INNER JOIN User_Teams ut ON t.id = ut.team_id
WHERE ut.user_id = $1
`

func (q *Queries) GetAllTeams(ctx context.Context, userID uuid.UUID) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamName,
			&i.CreatedBy,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamById = `-- name: GetTeamById :one
SELECT t.id, t.created_at, t.updated_at, t.team_name, t.created_by, t.is_private
FROM Teams t
INNER JOIN User_Teams ut ON t.id = ut.team_id
WHERE ut.user_id = $1 AND ut.team_id = $2
`

type GetTeamByIdParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) GetTeamById(ctx context.Context, arg GetTeamByIdParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamById, arg.UserID, arg.TeamID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamName,
		&i.CreatedBy,
		&i.IsPrivate,
	)
	return i, err
}

const getTeamMember = `-- name: GetTeamMember :one
SELECT user_id, team_id, role, joined_at FROM User_Teams WHERE user_id = $1 AND team_id = $2
`

type GetTeamMemberParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (UserTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeamMember, arg.UserID, arg.TeamID)
	var i UserTeam
	err := row.Scan(
		&i.UserID,
		&i.TeamID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT id, created_at, updated_at, team_name, created_by, is_private FROM teams WHERE id = $1
`

func (q *Queries) GetTeamMembers(ctx context.Context, id uuid.UUID) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamName,
			&i.CreatedBy,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newTeam = `-- name: NewTeam :exec
INSERT INTO teams (id, created_at, updated_at, team_name, created_by, is_private)
VALUES(
    gen_random_uuid (),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
`

type NewTeamParams struct {
	TeamName  string
	CreatedBy uuid.UUID
	IsPrivate bool
}

func (q *Queries) NewTeam(ctx context.Context, arg NewTeamParams) error {
	_, err := q.db.ExecContext(ctx, newTeam, arg.TeamName, arg.CreatedBy, arg.IsPrivate)
	return err
}

const removeUser = `-- name: RemoveUser :exec
DELETE FROM user_teams WHERE user_id = $1 AND team_id = $2
`

type RemoveUserParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) RemoveUser(ctx context.Context, arg RemoveUserParams) error {
	_, err := q.db.ExecContext(ctx, removeUser, arg.UserID, arg.TeamID)
	return err
}
