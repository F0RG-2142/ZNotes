// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: teams.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addNoteToTeam = `-- name: AddNoteToTeam :exec
INSERT INTO Note_Teams (note_id, team_id, shared_at)
SELECT $1, t.id, NOW()
FROM Teams t
JOIN User_Teams ut ON t.id = ut.team_id
WHERE t.id = $2
AND ut.user_id = $3
AND ut.role IN ('admin', 'editor')
`

type AddNoteToTeamParams struct {
	NoteID uuid.UUID
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) AddNoteToTeam(ctx context.Context, arg AddNoteToTeamParams) error {
	_, err := q.db.ExecContext(ctx, addNoteToTeam, arg.NoteID, arg.ID, arg.UserID)
	return err
}

const addUserToTeam = `-- name: AddUserToTeam :exec
INSERT INTO user_teams (user_id, team_id, role, joined_at)
VALUES (
    $1,
    $2,
    $3,
    NOW()
)
`

type AddUserToTeamParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
	Role   string
}

func (q *Queries) AddUserToTeam(ctx context.Context, arg AddUserToTeamParams) error {
	_, err := q.db.ExecContext(ctx, addUserToTeam, arg.UserID, arg.TeamID, arg.Role)
	return err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM Teams t
USING User_Teams ut
WHERE t.id = ut.team_id
AND ut.user_id = $1
AND ut.role = 'admin'
AND t.id = $2
`

type DeleteTeamParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) DeleteTeam(ctx context.Context, arg DeleteTeamParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, arg.UserID, arg.ID)
	return err
}

const getAllTeams = `-- name: GetAllTeams :many
SELECT t.id, t.created_at, t.updated_at, t.team_name, t.created_by, t.is_private
FROM Teams t
INNER JOIN User_Teams ut ON t.id = ut.team_id
WHERE ut.user_id = $1
`

func (q *Queries) GetAllTeams(ctx context.Context, userID uuid.UUID) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamName,
			&i.CreatedBy,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamById = `-- name: GetTeamById :one
SELECT t.id, t.created_at, t.updated_at, t.team_name, t.created_by, t.is_private
FROM Teams t
INNER JOIN User_Teams ut ON t.id = ut.team_id
WHERE ut.user_id = $1 AND ut.team_id = $2
`

type GetTeamByIdParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) GetTeamById(ctx context.Context, arg GetTeamByIdParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamById, arg.UserID, arg.TeamID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamName,
		&i.CreatedBy,
		&i.IsPrivate,
	)
	return i, err
}

const getTeamMember = `-- name: GetTeamMember :one
SELECT user_id, team_id, role, joined_at FROM User_Teams WHERE user_id = $1 AND team_id = $2
`

type GetTeamMemberParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (UserTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeamMember, arg.UserID, arg.TeamID)
	var i UserTeam
	err := row.Scan(
		&i.UserID,
		&i.TeamID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT id, created_at, updated_at, team_name, created_by, is_private FROM teams WHERE id = $1
`

func (q *Queries) GetTeamMembers(ctx context.Context, id uuid.UUID) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamName,
			&i.CreatedBy,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamNote = `-- name: GetTeamNote :one
SELECT n.id, n.created_at, n.updated_at, n.body, n.user_id
FROM Notes n
JOIN Note_Teams nt ON n.id = nt.note_id
JOIN User_Teams ut ON nt.team_id = ut.team_id
WHERE n.id = $1
AND nt.team_id = $2
AND ut.user_id = $3
`

type GetTeamNoteParams struct {
	ID     uuid.UUID
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetTeamNote(ctx context.Context, arg GetTeamNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, getTeamNote, arg.ID, arg.TeamID, arg.UserID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getTeamNotes = `-- name: GetTeamNotes :many
SELECT n.id, n.created_at, n.updated_at, n.body, n.user_id
FROM Notes n
JOIN Note_Teams nt ON n.id = nt.note_id
JOIN User_Teams ut ON nt.team_id = ut.team_id
WHERE nt.team_id = $1
AND ut.user_id = $2
`

type GetTeamNotesParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetTeamNotes(ctx context.Context, arg GetTeamNotesParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getTeamNotes, arg.TeamID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newTeam = `-- name: NewTeam :exec
INSERT INTO teams (id, created_at, updated_at, team_name, created_by, is_private)
VALUES(
    gen_random_uuid (),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
`

type NewTeamParams struct {
	TeamName  string
	CreatedBy uuid.UUID
	IsPrivate bool
}

func (q *Queries) NewTeam(ctx context.Context, arg NewTeamParams) error {
	_, err := q.db.ExecContext(ctx, newTeam, arg.TeamName, arg.CreatedBy, arg.IsPrivate)
	return err
}

const removeNoteFromTeam = `-- name: RemoveNoteFromTeam :exec
DELETE FROM Notes n
USING Note_Teams nt
JOIN User_Teams ut ON nt.team_id = ut.team_id
WHERE n.id = nt.note_id
AND nt.note_id = $1
AND ut.user_id = $2
AND ut.role = 'admin'
`

type RemoveNoteFromTeamParams struct {
	NoteID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) RemoveNoteFromTeam(ctx context.Context, arg RemoveNoteFromTeamParams) error {
	_, err := q.db.ExecContext(ctx, removeNoteFromTeam, arg.NoteID, arg.UserID)
	return err
}

const removeUserFromTeam = `-- name: RemoveUserFromTeam :exec
DELETE FROM user_teams WHERE user_id = $1 AND team_id = $2
`

type RemoveUserFromTeamParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) RemoveUserFromTeam(ctx context.Context, arg RemoveUserFromTeamParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromTeam, arg.UserID, arg.TeamID)
	return err
}

const updateTeamNote = `-- name: UpdateTeamNote :exec
UPDATE Notes n
SET body = $1, updated_at = NOW()
FROM Note_Teams nt
JOIN User_Teams ut ON nt.team_id = ut.team_id
WHERE n.id = nt.note_id
AND n.id = $2
AND nt.team_id = $3
AND ut.user_id = $4
`

type UpdateTeamNoteParams struct {
	Body   string
	ID     uuid.UUID
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UpdateTeamNote(ctx context.Context, arg UpdateTeamNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamNote,
		arg.Body,
		arg.ID,
		arg.TeamID,
		arg.UserID,
	)
	return err
}
